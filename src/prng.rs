//! This module provides helper methods to setup pseudo-random-number-generators (prng's)
//! by seeding them with data obtained from the [`crate::hwrng`] module.
//!
//! At the moment two prngs are available: [`rand::rngs::StdRng`] and [`crate::random::Random`].
//! Both of these claim to be cryptographic secure prngs. Provided the seeds from RIOTs HWRNG that are used
//! provide enough entropy to begin with, which drastically depends on the board used,
//! see remarks in [RIOTs documentation](https://doc.riot-os.org/group__drivers__periph__hwrng.html).

use embedded_hal::prelude::_embedded_hal_blocking_rng_Read;
use rand::{rngs::StdRng, SeedableRng};

use crate::{
    hwrng::HWRNG,
    random::{Random, RandomSeed},
};

/// Seeds a [`crate::random::Random`] prng with a 32 byte seed generated by RIOTs HWRNG.
///
/// See this modules description regarding quality of the used seeds.
///
/// Be aware that there should be only one `Random` object at a time,
/// since RIOT uses a global state for this internally, so creating a second object
/// just results in the global state beeing overwritten and
/// both objects representing practically the same prng.
#[cfg(riot_module_random)]
pub fn riot_prng() -> Random<32> {
    Random::<32>::from_seed(RandomSeed::new_from_hwrng())
}

/// Seeds a [`rand::rngs::StdRng`] prng with a 32 byte seed generated by RIOTs HWRNG.
///
/// See this modules description regarding quality of the used seeds.
pub fn rand_prng() -> StdRng {
    let mut buffer = [0u8; 32];

    HWRNG.read(&mut buffer).unwrap();

    StdRng::from_seed(buffer)
}
